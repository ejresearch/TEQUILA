{"ast":null,"code":"var _s = $RefreshSig$();\n// React hooks for day fields management\nimport { useState, useEffect, useCallback } from 'react';\nimport api from '../api/client';\nconst DAY_FIELDS = [{\n  key: '01_class_name.txt',\n  label: 'Class Name'\n}, {\n  key: '02_summary.md',\n  label: 'Summary'\n}, {\n  key: '03_grade_level.txt',\n  label: 'Grade Level'\n}, {\n  key: '04_role_context.json',\n  label: 'Role Context'\n}, {\n  key: '05_guidelines_for_sparky.md',\n  label: 'Guidelines for Sparky'\n}, {\n  key: '06_document_for_sparky.json',\n  label: 'Document for Sparky'\n}, {\n  key: '07_sparkys_greeting.txt',\n  label: \"Sparky's Greeting\"\n}];\nexport function useDayFields(weekNumber, dayNumber) {\n  _s();\n  const [day, setDay] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const loadDay = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Load all fields for the day\n      const fieldsData = {};\n      let completedFields = 0;\n      for (const field of DAY_FIELDS) {\n        try {\n          const result = await api.getDayField(weekNumber, dayNumber, field.key);\n          fieldsData[field.key] = result.content;\n          if (result.content && result.content !== '') {\n            completedFields++;\n          }\n        } catch (err) {\n          // Field doesn't exist yet\n          fieldsData[field.key] = '';\n        }\n      }\n      setDay({\n        day: dayNumber,\n        fields: fieldsData,\n        validated: completedFields === DAY_FIELDS.length,\n        fieldsComplete: completedFields,\n        totalFields: DAY_FIELDS.length\n      });\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load day fields');\n    } finally {\n      setLoading(false);\n    }\n  }, [weekNumber, dayNumber]);\n  const updateField = useCallback(async (fieldKey, content) => {\n    try {\n      await api.updateDayField(weekNumber, dayNumber, fieldKey, content);\n      await loadDay(); // Reload to get updated data\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to update field');\n      throw err;\n    }\n  }, [weekNumber, dayNumber, loadDay]);\n  useEffect(() => {\n    loadDay();\n  }, [loadDay]);\n  return {\n    day,\n    loading,\n    error,\n    reload: loadDay,\n    updateField,\n    fieldDefinitions: DAY_FIELDS\n  };\n}\n_s(useDayFields, \"dTwuz/Sn34/WTUDB63KXOQCKyIw=\");","map":{"version":3,"names":["useState","useEffect","useCallback","api","DAY_FIELDS","key","label","useDayFields","weekNumber","dayNumber","_s","day","setDay","loading","setLoading","error","setError","loadDay","fieldsData","completedFields","field","result","getDayField","content","err","fields","validated","length","fieldsComplete","totalFields","Error","message","updateField","fieldKey","updateDayField","reload","fieldDefinitions"],"sources":["/Users/elle_jansick/steel/frontend/src/hooks/useDayFields.ts"],"sourcesContent":["// React hooks for day fields management\nimport { useState, useEffect, useCallback } from 'react'\nimport api from '../api/client'\nimport type { Day } from '../types'\n\nconst DAY_FIELDS = [\n  { key: '01_class_name.txt', label: 'Class Name' },\n  { key: '02_summary.md', label: 'Summary' },\n  { key: '03_grade_level.txt', label: 'Grade Level' },\n  { key: '04_role_context.json', label: 'Role Context' },\n  { key: '05_guidelines_for_sparky.md', label: 'Guidelines for Sparky' },\n  { key: '06_document_for_sparky.json', label: 'Document for Sparky' },\n  { key: '07_sparkys_greeting.txt', label: \"Sparky's Greeting\" },\n]\n\nexport function useDayFields(weekNumber: number, dayNumber: number) {\n  const [day, setDay] = useState<Day | null>(null)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  const loadDay = useCallback(async () => {\n    setLoading(true)\n    setError(null)\n\n    try {\n      // Load all fields for the day\n      const fieldsData: Record<string, any> = {}\n      let completedFields = 0\n\n      for (const field of DAY_FIELDS) {\n        try {\n          const result = await api.getDayField(weekNumber, dayNumber, field.key)\n          fieldsData[field.key] = result.content\n          if (result.content && result.content !== '') {\n            completedFields++\n          }\n        } catch (err) {\n          // Field doesn't exist yet\n          fieldsData[field.key] = ''\n        }\n      }\n\n      setDay({\n        day: dayNumber,\n        fields: fieldsData,\n        validated: completedFields === DAY_FIELDS.length,\n        fieldsComplete: completedFields,\n        totalFields: DAY_FIELDS.length,\n      })\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load day fields')\n    } finally {\n      setLoading(false)\n    }\n  }, [weekNumber, dayNumber])\n\n  const updateField = useCallback(async (fieldKey: string, content: any) => {\n    try {\n      await api.updateDayField(weekNumber, dayNumber, fieldKey, content)\n      await loadDay() // Reload to get updated data\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to update field')\n      throw err\n    }\n  }, [weekNumber, dayNumber, loadDay])\n\n  useEffect(() => {\n    loadDay()\n  }, [loadDay])\n\n  return {\n    day,\n    loading,\n    error,\n    reload: loadDay,\n    updateField,\n    fieldDefinitions: DAY_FIELDS,\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}